using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AIController : MonoBehaviour
{
    [Header("追趕距離")]
    [SerializeField] float chaseDistance = 10f;
    [Header("失去目標後困惑的時間")]
    [SerializeField] float cunfuseTime = 5f;

    [Header("patrol的GameObject物件")]
    [SerializeField] PatrolPath patrol;
    [Header("需要到達Waypoint的距離")]
    [SerializeField] float waypointToStay = 1f;
    [Header("待在WayPoint的時間")]
    [SerializeField] float waypointToWaitTime = 3f;
    [Header("巡邏時的速度")]
    [Range(0, 1)]
    [SerializeField] float patrolSpeedRatio = 0.5f;

    GameObject player;
    Mover mover;
 

    //上次看到玩家的時間
    private float timeSinceLastSawPlayer = Mathf.Infinity;
    //原點座標
    private Vector3 beginPostion;
    //當前需要到達的WayPoint編號
    int currentWaypointIndex = 0;
    //距離上次抵達WayPoint的時間
    float timeSinceArriveWaypoint = 0;

    //要攻擊的目標
    public Transform Target;
    //扇形距離 攻擊距離  扇形的半徑 
    private float SectorDistance = 10;
    //扇形的角度 也就是攻擊的角度
    private float SectorAngle = 60;

    private void Awake()
    {
        mover = GetComponent<Mover>();
        player = GameObject.FindGameObjectWithTag("Player");
        beginPostion = transform.position;
    }
    private void Update()
    {
        
        if (IsInRange() || InSectorRange())//玩家在追趕範圍內
        {
            timeSinceLastSawPlayer = 0;
            //移動到player前方
            mover.MoveTo(player.transform.position, 1);

        }
        else if (timeSinceLastSawPlayer < cunfuseTime)//困惑狀態
        {
            ConfuseBehaviour();
        }
        else//巡邏，回到原點
        {
            PatrolBehaviour();

        }
        UpdateTimer();
    }
    //巡邏行為
    private void PatrolBehaviour()
    {
        Vector3 nextWaypointPosition = beginPostion;
        if (patrol != null)
        {
            if (IsAtWaitPoint())
            {
                mover.CancelMove();
                timeSinceArriveWaypoint = 0;
                currentWaypointIndex = patrol.GetNextWayPointNumber(currentWaypointIndex);//取得下一點位置
            }
            if (timeSinceArriveWaypoint > waypointToWaitTime)//在路徑點待超過一定時間，前往下一點
            {
                mover.MoveTo(patrol.GetWayPointPosition(currentWaypointIndex), patrolSpeedRatio);
            }
        }
        else
        {
            //回到原點
            mover.MoveTo(beginPostion, 0.5f);
        }
    }
    //檢查是否已經抵達WaitPoint
    private bool IsAtWaitPoint()
    {
        //怪物和路徑點的距離夠近時，回傳true，否則傳false
        return (Vector3.Distance(transform.position, patrol.GetWayPointPosition(currentWaypointIndex)) < waypointToStay);
    }

    //困惑的動作行為
    private void ConfuseBehaviour()
    {
        //取消移動(攻擊)
        mover.CancelMove();
        //困惑動作
        
    }

    //是否小於追趕距離內
    private bool IsInRange()
    {
        //兩者之間的距離小於追趕距離，回傳true，否則傳false
        return Vector3.Distance(transform.position, player.transform.position) < chaseDistance;
    }
    //計時器
    private void UpdateTimer()
    {
        timeSinceLastSawPlayer += Time.deltaTime;
        timeSinceArriveWaypoint += Time.deltaTime;
    }

    private void OnDamage()
    {
        //受到攻擊時，觸發的事情
    }
    private void OnDead()
    {
        mover.CancelMove();
    }
    //Call by Unity
    //這是自行繪製visable可視化物件，用來設計怪物追蹤玩家的範圍
    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        //以怪物為中心畫出追趕範圍
        Gizmos.DrawWireSphere(transform.position, chaseDistance);
    }

    public bool InSectorRange()
    {
        //與敵人的距離
        float distance = Vector3.Distance(transform.position, Target.position);
        //玩家正前方的向量
        Vector3 norVec = transform.rotation * Vector3.forward;
        //玩家與敵人的方向向量
        Vector3 temVec = Target.position - transform.position;
        //求兩個向量的夾角
        float Angle = Mathf.Acos(Vector3.Dot(norVec.normalized, temVec.normalized)) * Mathf.Rad2Deg;
        if (distance < SectorDistance)
        {
            if (Angle <= SectorAngle * 0.5f)
            {
                return true;
            }
        }
        return false;
    }
}

